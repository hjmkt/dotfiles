snippet compro
    #include <bits/stdc++.h>

    using namespace std;
    using ll = long long;
    using vll = vector<ll>;
    using vvll = vector<vll>;
    using vvvll = vector<vvll>;

    #define REP(i, n, m) for(ll i=n; i<(ll)m; ++i)
    #define IREP(i, n, m) for(ll i=n-1; i>=m; --i)
    #define rep(i, n) REP(i, 0, n)
    #define irep(i, n) IREP(i, n, 0)
    #define all(v) v.begin(), v.end()
    #define vprint(v) for(auto e:v){cout<<e<<" ";};cout<<endl;
    #define vvprint(vv) for(auto v:vv)vprint(v);

    int main(){
        cin.tie(0);
        ios::sync_with_stdio(false);
        cout << setprecision(20);
    }

snippet djkstra
    template<typename T=ll>
    vector<ll> djkstra(vector<vector<T>> &v, ll src, function<bool(const T&, const T&)> comp=greater<T>()){
        auto c = [&comp](pair<T, ll> l, pair<T, ll> r){ return comp(l.first, r.first); };
        priority_queue<pair<T, ll>, vector<pair<T, ll>>, decltype(c)> q(c);
        vector<T> s(v.size(), LLONG_MAX);
        q.push({0, src});
        while(!q.empty()){
            auto e = q.top();
            q.pop();
            ll d = e.first;
            ll n = e.second;
            if(s[n]<LLONG_MAX) continue;
            s[n] = d;
            rep(i, v.size()){
                if(s[i]<LLONG_MAX || v[n][i]<0) continue;
                q.push({d+v[n][i], i});
            }
        }
        return s;
    }

snippet edjkstra
    template<typename T=ll>
    vector<ll> djkstra(vector<unordered_map<ll, T>> &e, ll src, function<bool(const T&, const T&)> comp=greater<T>()){
        auto c = [&comp](pair<T, ll> l, pair<T, ll> r){ return comp(l.first, r.first); };
        priority_queue<pair<T, ll>, vector<pair<T, ll>>, decltype(c)> q(c);
        vector<T> s(e.size(), LLONG_MAX);
        q.push({0, src});
        while(!q.empty()){
            auto p = q.top();
            q.pop();
            ll d = p.first;
            ll n = p.second;
            if(s[n]<LLONG_MAX) continue;
            s[n] = d;
            for(auto t : e[n]){
                if(s[t.first]<LLONG_MAX) continue;
                q.push({d+t.second, t.first});
            }
        }
        return s;
    }

snippet warshall
    template<typename T=ll>
    void warshall(vector<vector<T>> &v, function<bool(const T&, const T&)> comp=less<T>()){
        ll n = v.size();
        rep(i, n) rep(j, n) rep(k, n){
            v[j][k] = comp(v[j][k], v[j][i]+v[i][k])? v[j][k] : (v[j][i]+v[i][k]);
        }
    }

snippet pow_mod
    ll pow_mod(ll n, ll m, ll mod=1000000007){
        ll a = 1;
        while(m>0){
            if(m&1) a = a*n % mod;
            n = n*n % mod;
            m >>= 1;
        }
        return a;
    }

snippet combination_mod
    ll combi(ll n, ll m, ll mod=1000000007){
        static const ll N_MAX = 100000;
        static vll fac(N_MAX+1, -1);
        static vll ifac(N_MAX+1, -1);

        if(fac[0]<0){
            fac[0] = ifac[0] = 1;
            rep(i, N_MAX){
                fac[i+1] = fac[i] * (i+1) % mod;
                ifac[i+1] = ifac[i] * pow_mod(i+1, mod-2, mod) % mod;
            }
        }

        if(n<=0 && m<=0) return 1;
        if(n<m || n<0) return 0;
        return (ifac[n-m] * ifac[m] % mod) * fac[n] % mod;
    }

snippet gcd
    ll gcd(ll n, ll m){
        while(true){
            if(n<m) swap(n, m);
            if(!m) break;
            n %= m;
        }
        return n;
    }

snippet split
    vector<string> split(string str, char del){
        vector<string> res;
        string sub = "";
        for(char c : str){
            if(c==del){
                res.push_back(sub);
                sub = "";
            }
            else sub += c;
        }
        res.push_back(sub);
        return res;
    }

snippet phash
    template<typename A, typename B>
    struct pair_hash{
        inline size_t operator()(const pair<A, B> &p) const{
            const auto h1 = hash<A>()(p.first);
            const auto h2 = hash<B>()(p.second);
            return h1^(h2<<18);
        }
    };

snippet sstree
    class SSTree{
    public:
        ll size;
        vll v;
        vll lv;
    
        SSTree(ll n){
            this->size = n;
            ll m = 1;
            while(n>m) m *= 2;
            this->v = vll(2*m-1, 0);
            this->lv = vll(2*m-1, 0);
        }
    
        ll get(ll left, ll right, ll level=0, ll idx=0){
            if(left>right) return 0;
            ll lb = (idx-(1<<level)+1) * (1<<level) + this->v.size()/2;
            ll ub = lb + (this->v.size()+1)>>(level+2);
            if(lb==left && ub==right){
                stack<ll> s;
                idx = (idx-1) / 2;
                while(idx>=0){
                    s.push(idx);
                    idx = (idx-1) / 2;
                }
                while(!s.empty()){
                    ll e = s.top();
                    s.pop();
                    v[e*2+1] += lv[e]/2;
                    v[e*2+2] += lv[e]/2;
                    lv[e] = 0;
                }
            }
            else return get(left, (lb+ub)/2, level+1, idx*2+1) + get((lb+ub)/2+1, right, level+1, idx*2+2);
        }
    
        void update(ll left, ll right, ll e, ll level=0, ll idx=0){
            if(left>right) return;
            ll lb = (idx-(1<<level)+1) * (1<<level) + this->v.size()/2;
            ll ub = lb + (this->v.size()+1)>>(level+2);
            if(lb==left && ub==right) v[idx] = lv[idx] = e;
            else{
                update(left, (lb+ub)/2, e, level+1, idx*2+1);
                update((lb+ub)/2+1, right, e, level+1, idx*2+2);
            }
        }
    };
