snippet compro
    #include <bits/stdc++.h>

    using namespace std;
    using ll = long long;
    using vll = vector<ll>;
    using vvll = vector<vll>;

    #define REP(i, n, m) for(ll i=n; i<(ll)m; ++i)
    #define IREP(i, n, m) for(ll i=n-1; i>=m; --i)
    #define rep(i, n) REP(i, 0, n)
    #define irep(i, n) IREP(i, n, 0)
    #define all(v) v.begin(), v.end()

    int main(){

    }

snippet djkstra
    template<typename T=ll>
    ll djkstra(vector<vector<T>> &v, ll src, ll dst, function<bool(const T&, const T&)> comp=less<T>()){
        auto c = [&comp](pair<T, ll> l, pair<T, ll> r){ return comp(l.first, r.first); };
        priority_queue<pair<T, ll>, vector<pair<T, ll>>, decltype(c)> q(c);
        vector<T> s(v.size(), -1);
        q.push({0, src});
        while(!q.empty()){
            auto e = q.top();
            ll d = e.first;
            ll n = e.second;
            if(s[n]>=0) continue;
            s[n] = d;
            if(n==dst) break;
            rep(i, v.size()){
                if(s[i]>=0 || v[n][i]<0) continue;
                q.push({d+v[n][i], i});
            }
        }
        return s[dst];
    }

snippet combination
    ll combi(ll n, ll m){
        static const ll N_MAX = 10000;
        static vvll t(N_MAX+1, vll(N_MAX, -1));
        if(n<m) return 0;
        if(n<0 || m<0) return 0;
        if(m==0) return 1;
        if(t[n][m]>=0) return t[n][m];
        t[n][m] = combi(n-1, m) + combi(n-1, m-1);
        return t[n][m];
    }

snippet combination_mod
    ll combi_mod(ll n, ll m){
        static const ll N_MAX = 10000;
        static const ll MOD = 1000000007;
        static vvll t(N_MAX+1, vll(N_MAX, -1));
        if(n<m) return 0;
        if(n<0 || m<0) return 0;
        if(m==0) return 1;
        if(t[n][m]>=0) return t[n][m];
        t[n][m] = (combi(n-1, m) + combi(n-1, m-1)) % MOD;
        return t[n][m];
    }

snippet pow_mod
    ll pow_mod(ll n, ll m){
        static const ll MOD = 1000000007;
        ll a = 1;
        while(m>0){
            if(m&1) a = a*n % MOD;
            n = n*n % MOD;
            m >>= 1;
        }
        return a;
    }

snippet gcd
    ll gcd(ll n, ll m){
        while(true){
            if(n<m) swap(n, m);
            if(!m) break;
            n %= m;
        }
        return n;
    }
