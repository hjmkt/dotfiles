{
  "Competitive Programming": {
    "prefix": ["compro"],
    "body": [
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "using ll = long long;",
      "using vll = vector<ll>;",
      "using vvll = vector<vll>;",
      "using vvvll = vector<vvll>;",
      "template<class T> using uset = unordered_set<T>;",
      "template<class T, class U> using umap = unordered_map<T, U>;",
      "template<class T> using mset = multiset<T>;",
      "template<class T, class U> using mmap = multimap<T, U>;",
      "template<class T> using umset = unordered_multiset<T>;",
      "template<class T, class U> using ummap = unordered_multimap<T, U>;",
      "",
      "#define REP(i, n, m) for(ll i=n; i<(ll)m; ++i)",
      "#define IREP(i, n, m) for(ll i=n-1; i>=m; --i)",
      "#define rep(i, n) REP(i, 0, n)",
      "#define irep(i, n) IREP(i, n, 0)",
      "#define all(v) v.begin(), v.end()",
      "#define vprint(v) for(auto e:v){cout<<e<<\" \";};cout<<endl;",
      "#define vvprint(vv) for(auto v:vv){vprint(v)};",
      "",
      "int main(){",
      "    cin.tie(0);",
      "    ios::sync_with_stdio(false);",
      "    cout << setprecision(20);",
      "}"
    ],
    "description": "Competitive programming template"
  },
  "Djkstra Algorithm": {
    "prefix": ["djkstra"],
    "body": [
      "template<typename T=ll>",
      "pair<vector<ll>, vector<ll>> djkstra(vector<unordered_map<ll, T>> &e, ll src, function<bool(const T&, const T&)> comp=greater<T>()){",
      "    auto c = [&comp](tuple<T, ll, ll> l, tuple<T, ll, ll> r){ return comp(get<0>(l), get<0>(r)); };",
      "    priority_queue<tuple<T, ll, ll>, vector<tuple<T, ll, ll>>, decltype(c)> q(c);",
      "    vector<T> s(e.size(), LLONG_MAX);",
      "    vector<ll> prev(e.size(), -1);",
      "    q.push({0, src, -1});",
      "    while(!q.empty()){",
      "        auto [d, n, p] = q.top();",
      "        q.pop();",
      "        if(s[n]<LLONG_MAX) continue;",
      "        s[n] = d;",
      "        prev[n] = p;",
      "        for(auto t : e[n]){",
      "            if(s[t.first]<LLONG_MAX) continue;",
      "            q.push({d+t.second, t.first, n});",
      "        }",
      "    }",
      "    return {s, prev};",
      "}"
    ],
    "description": "Djkstra algorithm for competitive programming"
  },
  "Warshall-Floyd Algorithm": {
    "prefix": ["warshall"],
    "body": [
      "template<typename T=ll>",
      "void warshall(vector<vector<T>> &v, function<bool(const T&, const T&)> comp=less<T>()){",
      "    ll n = v.size();",
      "    rep(i, n) rep(j, n) rep(k, n){",
      "        v[j][k] = comp(v[j][k], v[j][i]+v[i][k])? v[j][k] : (v[j][i]+v[i][k]);",
      "    }",
      "}"
    ],
    "description": "Warshall-Floyd algorithm for competitive programming"
  },
  "Power Mod": {
    "prefix": ["pow_mod"],
    "body": [
      "ll pow_mod(ll n, ll m, ll mod=1000000007){",
      "    ll a = 1;",
      "    while(m>0){",
      "        if(m&1) a = a*n % mod;",
      "        n = n*n % mod;",
      "        m >>= 1;",
      "    }",
      "    return a;",
      "}"
    ],
    "description": "Power-mod function for competitive programming"
  },
  "Combination Mod": {
    "prefix": ["combination_mod"],
    "body": [
      "ll combi(ll n, ll m, ll mod=1000000007){",
      "    static const ll N_MAX = 200001;",
      "    static vll fac(N_MAX+1, -1);",
      "    static vll ifac(N_MAX+1, -1);",
      "",
      "    if(fac[0]<0){",
      "        fac[0] = ifac[0] = 1;",
      "        rep(i, N_MAX){",
      "            fac[i+1] = fac[i] * (i+1) % mod;",
      "            ifac[i+1] = ifac[i] * pow_mod(i+1, mod-2, mod) % mod;",
      "        }",
      "    }",
      "",
      "    if(n<=0 && m<=0) return 1;",
      "    if(n<m || n<0) return 0;",
      "    return (ifac[n-m] * ifac[m] % mod) * fac[n] % mod;",
      "}"
    ],
    "description": "Combination-mod function for competitive programming"
  },
  "GCD": {
    "prefix": ["gcd"],
    "body": [
      "ll gcd(ll n, ll m){",
      "    while(true){",
      "        if(n<m) swap(n, m);",
      "        if(!m) break;",
      "        n %= m;",
      "    }",
      "    return n;",
      "}"
    ],
    "description": "GCD function for competitive programming"
  },
  "Split String": {
    "prefix": ["split"],
    "body": [
      "vector<string> split(string str, char del){",
      "    vector<string> res;",
      "    string sub = \"\";",
      "    for(char c : str){",
      "        if(c==del){",
      "            res.push_back(sub);",
      "            sub = \"\";",
      "        }",
      "        else sub += c;",
      "    }",
      "    res.push_back(sub);",
      "    return res;",
      "}"
    ],
    "description": "Split-string function for competitive programming"
  },
  "Pair Hash": {
    "prefix": ["phash"],
    "body": [
      "template<typename A, typename B>",
      "struct pair_hash{",
      "    inline size_t operator()(const pair<A, B> &p) const{",
      "        const auto h1 = hash<A>()(p.first);",
      "        const auto h2 = hash<B>()(p.second);",
      "        return h1^(h2<<18);",
      "    }",
      "};"
    ],
    "description": "Pair-hash function for competitive programming"
  },
  "Starry-Tree": {
    "prefix": ["sstree"],
    "body": [
      "class SSTree{",
      "public:",
      "    ll size;",
      "    vll v;",
      "    vll lv;",
      "",
      "    SSTree(ll n){",
      "        this->size = n;",
      "        ll m = 1;",
      "        while(n>m) m *= 2;",
      "        this->v = vll(2*m-1, 0);",
      "        this->lv = vll(2*m-1, 0);",
      "    }",
      "",
      "    ll get(ll left, ll right, ll level=0, ll idx=0){",
      "        if(left>right) return 0;",
      "        ll step = (this->v.size()+1) >> (level+1);",
      "        ll lb = (idx-(1<<level)+1) * step;",
      "        ll ub = lb + step - 1;",
      "        if(lb==left && ub==right){",
      "            vll s;",
      "            ll tmp = idx;",
      "            do{ s.push_back(tmp=(tmp-1)/2); } while(tmp>0);",
      "            for(auto it=s.rbegin(); it!=s.rend(); ++it){",
      "                for(int i=1; i<=2; ++i) v[*it*2+i] += lv[*it]/2;",
      "                for(int i=1; i<=2; ++i) lv[*it*2+i] += lv[*it]/2;",
      "                lv[*it] = 0;",
      "            }",
      "            return v[idx];",
      "        }",
      "        else return get(left, min((lb+ub)/2, right), level+1, idx*2+1) + get(max((lb+ub)/2+1, left), right, level+1, idx*2+2);",
      "    }",
      "",
      "    void update(ll left, ll right, ll e, ll level=0, ll idx=0){",
      "        if(left>right) return;",
      "        ll step = (this->v.size()+1) >> (level+1);",
      "        ll lb = (idx-(1<<level)+1) * step;",
      "        ll ub = lb + step - 1;",
      "        if(lb==left && ub==right){",
      "            this->v[idx] += e*step;",
      "            this->lv[idx] += e*step;",
      "        }",
      "        else{",
      "            this->v[idx] += e*(right-left+1);",
      "            ll mid = (lb+ub) / 2;",
      "            update(left, min(mid, right), e, level+1, idx*2+1);",
      "            update(max(mid+1, left), right, e, level+1, idx*2+2);",
      "        }",
      "    }",
      "};"
    ],
    "description": "Starry-tree data structure for competitive programming"
  },
  "Extended GCD": {
    "prefix": ["exgcd"],
    "body": [
      "pair<ll, ll> exgcd(ll a, ll b){",
      "    if(b==0) return {1, 0};",
      "    auto p = exgcd(b, a%b);",
      "    return {p.second, p.first-a/b*p.second};",
      "}"
    ],
    "description": "Extended GCD algorithm for competitive programming"
  },
  "Union Find": {
    "prefix": ["unionfind"],
    "body": [
      "class UnionFind{",
      "public:",
      "    ll size;",
      "    vll v;",
      "",
      "    UnionFind(ll n){",
      "        this->v = vll(n);",
      "        rep(i, n) this->v[i] = i;",
      "    }",
      "",
      "    ll root(ll n){",
      "        if(n!=v[n]) return v[n] = root(v[n]);",
      "        return n;",
      "    }",
      "",
      "    void unite(ll l, ll r){",
      "        ll lroot = root(l);",
      "        ll rroot = root(r);",
      "        if(lroot!=rroot) this->v[rroot] = lroot;",
      "    }",
      "};"
    ],
    "description": "Union Find data structure for competitive programming"
  },
  "Bellman-Ford Algorithm": {
    "prefix": ["bellman"],
    "body": [
      "template<typename T=ll>",
      "pair<vector<ll>, vector<ll>> bellman(vector<unordered_map<ll, T>> &e, ll src){",
      "    vll d(e.size(), LLONG_MAX);",
      "    vll prev(e.size(), -1);",
      "    d[src] = 0;",
      "    rep(i, e.size()){",
      "        bool updated = false;",
      "        rep(j, e.size()) for(auto p : e[j]){",
      "            if(d[j]==LLONG_MAX) continue;",
      "            if(d[p.first]>d[j]+p.second){",
      "                updated = true;",
      "                d[p.first] = d[j] + p.second;",
      "                prev[p.first] = j;",
      "                if(i==e.size()-1) return {};",
      "            }",
      "        }",
      "        if(!updated) break;",
      "    }",
      "    return {d, prev};",
      "}"
    ],
    "description": "Bellman-Ford algorithm for competitive programming"
  },
  "Minimum-Cost-Flow Algorithm": {
    "prefix": ["mincostflow"],
    "body": [
      "vector<unordered_map<ll, ll>> min_cost_flow(vector<unordered_map<ll, array<ll, 2>>> e, ll src, ll dst, ll flow){",
      "    vector<unordered_map<ll, ll>> f(e.size()), t(e.size());",
      "    rep(i, e.size()){",
      "        for(auto p : e[i]){",
      "            f[i][p.first] = 0;",
      "            t[i][p.first] = p.second[1];",
      "        }",
      "    }",
      "    while(flow>0){",
      "        auto [s, prev] = djkstra(t, src);",
      "        if(s[dst]==LLONG_MAX) return f;",
      "        vll path;",
      "        ll last = dst;",
      "        while(last>=0){",
      "            path.push_back(last);",
      "            last = prev[last];",
      "        }",
      "        reverse(all(path));",
      "        assert(path[0]==src);",
      "        assert(path[path.size()-1]==dst);",
      "        rep(i, t.size()) for(auto p : t[i]){",
      "            t[i][p.first] += s[i] - s[p.first];",
      "        }",
      "        ll m = flow;",
      "        rep(i, path.size()-1) m = min(m, e[path[i]][path[i+1]][0]);",
      "        rep(i, path.size()-1){",
      "            f[path[i]][path[i+1]] += m;",
      "            f[path[i+1]][path[i]] -= m;",
      "            e[path[i]][path[i+1]][0] -= m;",
      "            e[path[i+1]][path[i]][0] += m;",
      "            if(t[path[i+1]].find(path[i])==t[path[i+1]].end()) t[path[i+1]][path[i]] = -t[path[i]][path[i+1]];",
      "            if(e[path[i]][path[i+1]][0]<=0) t[path[i]].erase(path[i+1]);",
      "        }",
      "        flow -= m;",
      "    }",
      "    return f;",
      "}"
    ],
    "description": "Minimum-Cost-Flow algorithm for competitive programming"
  },
  "Strong Connected Components": {
    "prefix": ["scc"],
    "body": [
      "vector<uset<ll>> scc(vector<uset<ll>>& e){",
      "    ll n = e.size();",
      "    vll labels(n, -1);",
      "    vector<uset<ll>> s;",
      "    ll count = 0;",
      "    vector<bool> visited(n, false);",
      "    function<ll(ll, ll)> dfs = [&](ll root, ll count){",
      "        visited[root] = true;",
      "        for(ll m: e[root]){",
      "            if(visited[m]) continue;",
      "            count = dfs(m, count) + 1;",
      "        }",
      "        return labels[root] = count;",
      "    };",
      "    rep(i, n){",
      "        if(labels[i]>=0) continue;",
      "        count = dfs(i, count) + 1;",
      "    }",
      "    map<ll, ll> t;",
      "    rep(i, n) t[labels[i]] = i;",
      "    ll scc_idx = 0;",
      "    vector<bool> checked(n, false);",
      "    vector<uset<ll>> ie(n);",
      "    rep(i, n) for(ll m: e[i]) ie[m].insert(i);",
      "    while(!t.empty()){",
      "        uset<ll> c;",
      "        auto [_, root] = *t.rbegin();",
      "        deque<ll> q = {root};",
      "        while(!q.empty()){",
      "            ll m = q.front();",
      "            q.pop_front();",
      "            checked[m] = true;",
      "            c.insert(m);",
      "            t.erase(labels[root]);",
      "            for(ll o: ie[m]){",
      "                if(checked[o]) continue;",
      "                checked[o] = true;",
      "                q.push_back(o);",
      "            }",
      "        }",
      "        s.push_back(c);",
      "    }",
      "    return s;",
      "}"
    ],
    "description": "Strong-Connected-Components decomposition algorithm for competitive programming"
  },
  "Placeholder": {
    "prefix": ["placeholder"],
    "body": [],
    "description": "Placeholder for competitive programming"
  },
  "Segment Tree": {
    "prefix": ["segtree"],
    "body": [
      "class SegTree{",
      "public:",
      "    ll size;",
      "    vll v;",
      "    vll lv;",
      "",
      "    SegTree(ll n){",
      "        this->size = n;",
      "        ll m = 1;",
      "        while(n>m) m *= 2;",
      "        this->v = vll(2*m-1, 0);",
      "        this->lv = vll(2*m-1, 0);",
      "    }",
      "",
      "    ll get(ll left, ll right, ll level=0, ll idx=0){",
      "        if(left>right) return 0;",
      "        ll step = (this->v.size()+1) >> (level+1);",
      "        ll lb = (idx-(1<<level)+1) * step;",
      "        ll ub = lb + step - 1;",
      "        if(lb==left && ub==right){",
      "            return v[idx];",
      "        }",
      "        else return max(get(left, min((lb+ub)/2, right), level+1, idx*2+1), get(max((lb+ub)/2+1, left), right, level+1, idx*2+2));",
      "    }",
      "",
      "    void update(ll x, ll e, ll level=0, ll idx=0){",
      "        ll step = (this->v.size()+1) >> (level+1);",
      "        ll lb = (idx-(1<<level)+1) * step;",
      "        ll ub = lb + step - 1;",
      "        if(lb==x && ub==x){",
      "            this->v[idx] = max(this->v[idx], e);",
      "        }",
      "        else{",
      "            this->v[idx] = max(this->v[idx], e);",
      "            ll mid = (lb+ub) / 2;",
      "            if(x<=mid) update(x, e, level+1, idx*2+1);",
      "            else update(x, e, level+1, idx*2+2);",
      "        }",
      "    }",
      "};"
    ],
    "description": "Segment tree data structure for competitive programming"
  },
  "Prime": {
    "prefix": ["prime"],
    "body": [
      "ll N_PRIMES = 100000;",
      "vector<bool> is_prime(N_PRIMES+1, true);",
      "vll primes;",
      "REP(i, 2, N+1){",
      "    if(is_prime[i]){",
      "        primes.push_back(i);",
      "        for(ll j=i+i; j<N_PRIMES+1; j+=i) is_prime[j] = false;",
      "    }",
      "    else continue;",
      "}"
    ],
    "description": "Generating prime numbers for competitive programming"
  },
  "Fenwick Tree": {
    "prefix": ["fenwick"],
    "body": [
      "class FenwickTree{",
      "public:",
      "    ll size;",
      "    vll v;",
      "",
      "    FenwickTree(ll n){",
      "        this->size = n;",
      "        ll m = 1;",
      "        while(n>m) m *= 2;",
      "        this->v = vll(m, 0);",
      "    }",
      "",
      "    ll _get(ll x){",
      "        ll lsb = x & -x;",
      "        ll r = x - lsb;",
      "        if(r>0) return this->v[x-1] + _get(r);",
      "        return this->v[x-1];",
      "    }",
      "",
      "    ll get(ll left, ll right){",
      "        if(left<=0) return _get(right+1);",
      "        return _get(right+1) - _get(left);",
      "    }",
      "",
      "    void update(ll x, ll e){",
      "        this->v[x] += e;",
      "        if(x==this->v.size()-1) return;",
      "        ll lsb = (x+1) & -(x+1);",
      "        update(x+lsb, e);",
      "    }",
      "};"
    ],
    "description": "Fenwick tree data structure for competitive programming"
  }
}
