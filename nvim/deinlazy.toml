[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF

-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'ccls', 'rust_analyzer', 'jsonls' }
for _, lsp in pairs(servers) do
    require('lspconfig')[lsp].setup {
        on_attach = on_attach,
        flags = {
            -- This will be the default in neovim 0.7+
            debounce_text_changes = 150,
        }
    }

    require('lspconfig')['pylsp'].setup{
        on_attach = on_attach,
        flags = lsp_flags,
        plugins = {
            black = {
                enabled = true,
            },
            flake8 = {
                enabled = true,
            }
        },
        settings = {
            configurationSources = {"flake8"},
            formatCommand = {"black"}
        }
    }

    require('lspconfig')['eslint'].setup{
        on_attach = on_attach,
        flags = lsp_flags,
        filetypes = {"javascript", "typescript", "json", "javascriptreact", "typescriptreact"}
    }

    require'lspconfig'.rust_analyzer.setup ({
        on_attach = on_attach,
        settings = {
            ["rust-analyzer"] = {
                assist = {
                    importMergeBefavior = "last",
                    importPrefix = "by_self",
                },
                diagnostics = {
                    enable = true,
                    enableExperimental = true,
                    disabled = {"inactive-code","unresolved-proc-macro"},
                },
                cargo = {
                    loadOutDirsFromCheck = true,
                },
                procMacro = {
                    enable = true,
                },
                checkOnSave = {
                    command = "clippy",
                }
            }
        }
    })
end
EOF
'''


[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'


#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = 'ddc.vim'
#hook_source = '''
  #call popup_preview#enable()
#'''


#[[plugins]]
#repo = 'Shougo/ddc-around'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-matcher_head'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-sorter_rank'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-converter_remove_overlap'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-nvim-lsp'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'LumaKernel/ddc-file'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'tani/ddc-fuzzy'
#on_source = 'ddc.vim'


#[[plugins]]
#repo = 'hrsh7th/vim-vsnip'
#on_event = 'InsertEnter'
#depends = ['vim-vsnip-integ', 'friendly-snippets']
#hook_add = '''
  #imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  #smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  #imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  #smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  #imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  #smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  #let g:vsnip_filetypes = {}
#'''







#[[plugins]]
#repo = 'MunifTanjim/prettier.nvim'
#hook_source = '''
#lua << EOF
#local prettier = require("prettier")
#prettier.setup({
    #bin = 'prettier', -- or `'prettierd'` (v0.22+)
    #filetypes = {
        #"css",
        #"graphql",
        #"html",
        #"javascript",
        #"javascriptreact",
        #"json",
        #"less",
        #"markdown",
        #"scss",
        #"typescript",
        #"typescriptreact",
        #"yaml",
    #},
#})
#EOF
#'''


#[[plugins]]
#repo = 'matsui54/denops-signature_help'
#on_source = 'ddc.vim'
#hook_source = '''
  #call signature_help#enable()
#'''


#[[plugins]]
#repo = 'nvim-treesitter/nvim-treesitter'
#merged = 0
#on_event = 'BufRead'
#hook_post_update = 'TSUpdate'
#hook_source = '''
#lua << EOF
  #require('nvim-treesitter.configs').setup {
    #ensure_installed = 'all',
    #highlight = {
      #enable = true,
    #},
  #}
#EOF
#'''
